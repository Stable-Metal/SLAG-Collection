#pragma version ^0.4.0;

#include "../imports/stdlib.fc";

;; op and query_id must be loaded before
(slice, slice, int, int, int, int, cell, slice, cell) unpack_constructor(slice s) inline {
    slice   jetton_a_address     = s~load_msg_addr();
    slice   jetton_b_address     = s~load_msg_addr();
    int     apr                 = s~load_uint(32);
    int     reward_interval     = s~load_int(256);
    slice   restrictions_cell = s~load_ref().begin_parse();
    int     maximum_stake       = restrictions_cell~load_coins();
    int     minimum_stake       = restrictions_cell~load_coins();
    cell    escrow_contract_code = s~load_ref();
    slice   nft_data             = s~load_ref().begin_parse();
    slice   nft_collection_address = nft_data~load_msg_addr();
    cell    nft_metadata           = nft_data~load_ref();

    return (jetton_a_address, jetton_b_address, apr, reward_interval, 
    maximum_stake, minimum_stake, 
    escrow_contract_code, nft_collection_address, nft_metadata);
}

cell pack_provide_wallet(int query_id, slice owner_address) inline {
    return begin_cell()
        .store_uint(op::minter::provide_wallet_address, 32)
        .store_uint(query_id, 64)
        .store_slice(owner_address)
        .store_int(false, 1) ;; include_address
        .end_cell();
}

cell pack_simple_jetton_transfer(int query_id, int jetton_amount, slice to_address,
                                slice response_address, int fwd_amount) inline {
    return begin_cell()
        .store_uint(op::wallet::transfer, 32)
        .store_uint(query_id, 64)
        .store_coins(jetton_amount)
        .store_slice(to_address)
        .store_slice(response_address)
        .store_int(false, 1)        ;; custom_payload
        .store_coins(fwd_amount)    ;; fwd_amount
        .store_int(false, 1)        ;; either fwd_body
        .end_cell();
}

cell pack_staker_info(int stamp, int staked_a, int reward) inline {
    return begin_cell()
        .store_int(stamp, 256)
        .store_coins(staked_a)
        .store_coins(reward)
    .end_cell();
}

(int, int, int) unpack_staker_info(slice s) inline {
    int timestamp       = s~load_int(256);  ;; timestamp
    int staked_a    = s~load_coins();  ;; amount of a tokens staked
    int current_reward = s~load_coins();  ;; amount claimable B tokens

    return (timestamp, staked_a, current_reward);
}

;; for escrow init and get methods; used in address calculation
cell pack_escrow_data(slice main_address, slice staker_address) inline {
    return begin_cell()
        .store_slice(main_address)
        .store_slice(staker_address)
        .store_ref(pack_staker_info(0, 0, 0))
        .end_cell();
}

cell pack_get_escrow_data(int query_id, int fwd_op, builder fwd_payload) inline {
    return begin_cell()
        .store_uint(op::escrow::get_escrow_data, 32)
        .store_uint(query_id, 64)
        .store_uint(fwd_op, 32)
        .store_builder(fwd_payload) ;; adds slice
        .end_cell();
}

cell pack_store_execution_data(int query_id, cell ext_data, int fwd_op, builder fwd_payload) inline {
    return begin_cell()
        .store_uint(op::escrow::store_execution_data, 32)
        .store_uint(query_id, 64)
        .store_uint(fwd_op, 32)
        .store_ref(ext_data)
        .store_builder(fwd_payload)  ;; adds slice 
        .end_cell();
}

cell pack_nft_mint_message(int query_id, int item_value, cell nft_message) inline {
    return begin_cell()
        .store_uint(op::nft::mint, 32)
        .store_uint(query_id, 64)
        .store_int(0, 64) ;; item_index
        .store_coins(item_value)  ;; ton to send to the item
        .store_ref(nft_message)
        .end_cell();
}